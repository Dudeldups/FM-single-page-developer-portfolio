.get-clamp(
  @min-size,
  @max-size,
  @min-breakpoint,
  @max-breakpoint,
  @unit: vw
) {
  @slope: ((@max-size - @min-size) / (@max-breakpoint - @min-breakpoint));
  @slope-to-unit: round(unit(@slope * 100), 2);
  @intercept-rem: round(@min-size - @slope * @min-breakpoint, 2);
  @min-size-rem: round(@min-size, 2);
  @max-size-rem: round(@max-size, 2);
  @result: ~"clamp(@{min-size-rem}, @{slope-to-unit}@{unit} + @{intercept-rem}, @{max-size-rem})";
}

.mq(@breakpoints, @rules) {
  & when (length(@breakpoints) = 1) {
    @media screen and (min-width: .convert(@breakpoints, em)[]) {
      @rules();
    }
  }

  & when (length(@breakpoints) = 2) {
    @min: .convert(extract(@breakpoints, 1), em) [];
    @max: .convert(extract(@breakpoints, 2), em) [] - 0.01em;

    & when (@min = 0) {
      @media screen and (max-width: @max) {
        @rules();
      }
    }

    & when not (@min = 0) {
      @media screen and (min-width: @min) and (max-width: @max) {
        @rules();
      }
    }
  }
}

.convert(@input, @output: rem) {
  .value() when (ispixel(@input)) {
    @result: unit((@input / 16), @output);
  }
  .value() when not (ispixel(@input)) {
    @result: unit(@input, @output);
  }
  .value() when (@output = px) {
    @result: unit((@input*16), @output);
  }
  .value();
}

// .padding-inline() {
//   padding-inline: .get-clamp(1rem, 2.75rem, 20rem, 32rem) [];
// }

// .max-width() {
//   max-width: 78rem;
//   margin-inline: auto;
// }
